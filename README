This project contains Python scripts for studying Location Based Social Networks and disease simulation.

Description of files:

split_data.py : parses raw gowalla data to extract desired fields
#python split_data.py [gowalla_raw] [output]

fix_locations.py : fixes location info from citydata (census/coord)
    - outputs not_found.out for unfound cities
#python fix_locations.py location_data.raw census.p city_coordinates.p fixed_locations.in

fix_time.py : fixes timestamps to standard Eastern timezone
#python fix_time.py fixed_locations.in timezones.in fixed_time.in

citydata/ : directory contains raw data for census, city coordinates, parser
for raw files and pickled data
    **TODO: need to update raw census data, check mismatch with city_coord

datadist_analysis.py : extracts info about checkins
    - time_diff, distance, year09, year10, freq
#python datadist_analysis.py location_data.in data_info.out

distance_time.py
checkins_time.py
calc_speed.py
calc_timespeed.py
    - extracts info from data_info.out
    - time_diff, distance, total_checkins, total_time, speed

chartmaker/ : directory contains scripts for producing charts

remove_freq.py : remove freq/problem users
#python remove_freq.py [location_data] freq.out fixed_freq.in removed.out

loc_stats.py : extracts city based info
    - locations.p: maps city to list of users that visited the city
    - coordinates.p : maps city to avg (lat, long) coordinates from all locations
      in that city
    - location_stats.out : city/state user statistics
#python loc_stats.py location_data.in location_stats.out

user_list.py : extracts user checkin history
    - user_checkins.out : maps user to list of (city, date) checkins sorted
      chronologically
    - finds and separates Austin users
#python user_list.py location_data.in user_checkins.out austin.out

build_network.py : constructs location-based network from user checkin history
    - uses LocationGraph from locations.py
    - parses user_checkins.out to rebuild user checkin history
    - for each user, traverse history, add edge from one city to the next
    - for every city node created, set coordinates from coordinates.p
    - for each Austin walker, set edge weights as .5
    - add epsilon (5) weight between all pairs of city nodes
    - save network as gowalla_net
    - outputs network info
#python build_network.py user_checkins.out austin.out coordinates.p gowalla_net

locations.py : LocationGraph data structure uses networkx, directed graph

simulations.py : executes disease simulation
#python simulation.py [time_steps] [init_n] [n] [prob] locations.p census.p gowalla_net sim.out


